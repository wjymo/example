断点续传工程
使用RandomAccessFile和redis来完成文件分块上传和断点续传以及查询上传进度
使用命令行操作（使用springshell完成）

在服务器使用脚本打包和运行。使用者在shell完成文件上传等功能
应用打包
    ./spring-shell.sh package
运行程序
    ./spring-shell.sh




上传文件：用户在前端上传文件，服务端接收到inputstream后，将输入流写入到本地文件，然后计算出文件的摘要，并拿到文件的元信息（文件名称，文件大小，文件绝对路径），将摘要和元信息入库，并和所属用户绑定，

文件秒传：通过比对要上传的文件的摘要和数据库中存储的文件摘要，一致的话说明本地已有，不必再上传，如果没有再上传

文件分块上传和断点续传：将一个大文件拆分为多个小文件块再并行上传，拆分后的信息保存至redis（拆分后每一个文件块的大小，每一个文件块的序号（在文件合并的时候保证文件的顺序），每一次分块上传的id），

文件分块上传详细：
1.调用初始化分块上传的接口，参数为用户名，文件摘要，文件大小，封装成一个对象multipartInfo（文件摘要，文件大小，上传id（用户名+当前时间戳），文件块大小，文件块数量（文件大小/块大小）），将其存入redis（hset），总key为上传id，子key分别为文件块数量，文件摘要，文件大小，最后将multipartInfo返回。
2.拿到返回对象的上传id和文件块大小，去请求分块上传方法，参数是上传文件的绝对路径，分块上传的接口api以及文件块大小。首先读取文件内容，每次读取文件块大小的内容，读到一个buf中，然后index变量加一（文件块的索引），将buf（因为最后一个文件块可能小于设定的5m，所以此buf需要将使用的长度要限制住（0-n，n为一次从文件中读取的长度））和index传入一个异步线程，在线程中去请求上传接口的api。
3.在上传接口的api中，获取上传id和文件块索引，以上传id为目录名，文件块索引为文件名，创建一个新文件，然后将请求体中的文件块写入到新文件中，并在redis中的key为上传id的hash结构下设置一个子key为文件块索引，值为1的信息，代表此文件块上传完毕，然后返回
4.上传接口被多个异步线程并行调用，最终整个文件上传完成，然后再调用分块完成接口，首先使用hgetall获取redis中上传id对应数据data，遍历data，当子key为chunkcount时，将其对应value记录下来，就是文件块的总数量，或者当子key是以chkidx_开头并且value为一时，将一个变量chunkCount加一（说明一个文件块是上传完成的），chunkCount等于文件块总数量时，说明文件块都上传完成，
5.合并文件块，
6.更新数据库，文件信息表以及文件用户表
